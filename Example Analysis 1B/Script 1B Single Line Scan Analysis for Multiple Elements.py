# -*- coding: utf-8 -*-

import ElementalExcessFunctions 
'''
This script can be utilized to calculate the elemental excess for one line scan with multiple elemental components. 
In this option, it can be used so that one element is used to center all of the line scans. 
Example. If the line scan had Fe, Ni, and Cr. You may choose with this code to have a local Cr depletion center the GB for all line scans.


The assumed line scan input structure is X nunber of text files with two columns corresponding to each element. 
Line scan should correspond to the same spatial area. 

    -Column 1: position in units of m
    -Column 2: concentration one element in units of atomic fraction
    
Line Scan name structure is:  filename + "_line" + str(linenumber) + "-" + element
    Example: EDSScanData/0001_line1_Cr.txt, EDSScanData/0001_line1_Fe.txt, EDSScanData/0001_line1_Ni.txt
    
This script utilzies a number of functions written in ElementalExcessFunctions.py. Refer to the file for more guidance as needed.

The outputs for this script include:

    FIVE PLOTS
        - 1: /EDSPLOTS/fullfilename-1_initial_profile.png
        - 2: /EDSPLOTS/fullfilename-2_profile_converted.png
        - 3: /EDSPLOTS/fullfilename-3_profile_converted_GB_centered.png
        - 4: /EDSPLOTS/fullfilename-4_profile_converted_GB_centered_minusbulkavg_integrated_bounds_at_maxormin.png
        - 5: /ELEMETALEXCESSPLOTS/fullfilename.png
    
    THREE TEXT FILES
        - EDSMINMAXDATA/fullfilename_EDSMinMaxData.txt
        - ELEMENTALEXCESSDATA/fullfilename_ELEMENTALEXCESSData.txt corresponds to the plot # 5
        - ELEMENTALEXCESSMINMAXDATA/fullfilename_ELEMENTALEXCESSMinMaxData.txt corresponds to the extrema elemental excess plotted in plot 5
    

To use, fill out the below entries and run script. 
'''



## File Organization Terms ##

ANALYSISPATH = "Analysis Results"                         # ENTER THE PATH WHERE YOU WISH THE DATA GENERATED BY THIS SCRIPT TO BE SAVED
datafolder = "Line Scans"                           # ENTER THE DIRECTORY PATH WHERE THE LINE SCAN DATA IS BEING STORED
filename = "8505"                             # ENTER THE NAME OF THE LINE SCAN FILE, OMITTING THE LINE NUMBER AND ELEMENT, NOTE: SEE ABOVE FOR FILE NAMING ASSUMPTIONS
linenumber = 1                             # ENTER THE LINE SCAN NUMBER; BECAUSE THERE IS ONLY ONE LINE SCAN, ASSUMED ENTRY IS 1


## Material Specific Information ##
latparam = 0.3596 # nm
atoms = 4
atomicvolume = atoms/(latparam**3)      # ENTER THE ATOMIC VOLUME OF THE MATERIAL; THIS IS NECESSARY TO CONVERT FROM ATOMIC PERCENT TO ATOMS/NM3


## User Directives for Analysis
L_guess_nm_alongline = 170                   # ENTER A BEST GUESS FOR THE LOCATION OF THE GB ALONG THE LINE SCAN
weight = 0.3                                 # ENTER A WEIGHTING TO HELP ADJUST THE RANGE AROUND THE L_guess_nm_alongline WHERE THE LOCAL MIN/MAX CONCENTRATION WILL BE POTENTIALLY LOCATED
fraction = 0.3                               # ENTER A FRACTION; THIS HELPS DEFINE WHAT PORTION OF THE LINE SCAN IS USED TO FIND AN AVERAGE CONCENTRATION. EXAMPLE: 0.3 MEANS THAT THE FIRST 30% AND LAST 30% OF THE LINE SCAN WILL BE UTILIZED TO FIND THIS AVERAGE


linescanhalfdistance = 130                   # ENTER THE DISTANCES YOU WANT THE INTEGRATION BOUNDS TO EXTEND TO
integratecutoff = 130                        # ENTER THE DESIRED INTEGRATION BOUNDARY DISTANCE THE LOCAL ELEMENTAL EXCESS EXTREMA IS LOCATED FROM; CAN BE TYPICALLY THE SAME AS linescanhalfdistance


## Element Info ## 
# REPEAT FOR AS MANY ELEMENTS AS YOU HAVE

mainelement1 = "Cr"                          # ENTER THE ELEMENT BEING INVESTIGATED 
expectedminormax1 = "min"                     # ENTER WHETHER THIS ELEMENT IS EXPECTED TO HAVE A LOCAL MIN OR MAX AT THE GB. options: "min" and "max"
plotcolor1 = "#44AA99"                             # ENTER THE COLOR YOU WANT THE PLOT TO BE

mainelement2 = "Ni"                          # ENTER THE ELEMENT BEING INVESTIGATED 
expectedminormax2 = "max"                     # ENTER WHETHER THIS ELEMENT IS EXPECTED TO HAVE A LOCAL MIN OR MAX AT THE GB. options: "min" and "max"
plotcolor2 = "#AA4499"                           # ENTER THE COLOR YOU WANT THE PLOT TO BE

mainelement3 = "Mn"                          # ENTER THE ELEMENT BEING INVESTIGATED 
expectedminormax3 = "min"                     # ENTER WHETHER THIS ELEMENT IS EXPECTED TO HAVE A LOCAL MIN OR MAX AT THE GB. options: "min" and "max"
plotcolor3 = "#DDCC77"                            # ENTER THE COLOR YOU WANT THE PLOT TO BE

mainelement4 = "Mo"                          # ENTER THE ELEMENT BEING INVESTIGATED 
expectedminormax4 = "min"                     # ENTER WHETHER THIS ELEMENT IS EXPECTED TO HAVE A LOCAL MIN OR MAX AT THE GB. options: "min" and "max"
plotcolor4 = "#FFC0CB"                            # ENTER THE COLOR YOU WANT THE PLOT TO BE

mainelement5 = "Si"                          # ENTER THE ELEMENT BEING INVESTIGATED 
expectedminormax5 = "max"                     # ENTER WHETHER THIS ELEMENT IS EXPECTED TO HAVE A LOCAL MIN OR MAX AT THE GB. options: "min" and "max"
plotcolor5 = "#332288"                            # ENTER THE COLOR YOU WANT THE PLOT TO BE




## KEEP CONSTANT IF YOU WANT ALL LINE SCANS TO BE CENTERED IN THE SAME WAY. 
centerelement = "Cr"                        # ENTER THE ELEMENT YOU WANT THE ALGORITHM TO USE WHEN CENTERING THE LINE SCAN
centerelementexpectedminormax = "min"        # ENTER IF THE ELEMENT IS EXPECTED TO HAVE A LOCAL MIN OR MAX AT THE GB. options: "min" and "max"

## Adjusting the run ##
viewplots = "no"                          # ENTER "yes" IF YOU WANT TO SEE THE PLOTS INTERACTIVELY; ENTER "no" IF YOU DO NOT. OPTING YES COULD BE MEMORY INTENSIVE.



'''
OPTION 1B: MULTIPLE ELEMENTS, A SINGLE LINE SCAN
Can be used to process multiple elemental line scans corresponding to the same spatial area 
The grain boundary will be identified and centered by a chosen element (center element) so that all line scans can be adjusted the same. 
'''

ElementalExcessFunctions.analysis_singlelinescan(ANALYSISPATH, datafolder, filename, linenumber, mainelement1, expectedminormax1, centerelement, centerelementexpectedminormax,  plotcolor1,  atomicvolume, L_guess_nm_alongline, weight, fraction, linescanhalfdistance, integratecutoff, viewplots)
ElementalExcessFunctions.analysis_singlelinescan(ANALYSISPATH, datafolder, filename, linenumber, mainelement2, expectedminormax2, centerelement, centerelementexpectedminormax,  plotcolor2,  atomicvolume, L_guess_nm_alongline, weight, fraction, linescanhalfdistance, integratecutoff, viewplots)
ElementalExcessFunctions.analysis_singlelinescan(ANALYSISPATH, datafolder, filename, linenumber, mainelement3, expectedminormax3, centerelement, centerelementexpectedminormax,  plotcolor3,  atomicvolume, L_guess_nm_alongline, weight, fraction, linescanhalfdistance, integratecutoff, viewplots)
ElementalExcessFunctions.analysis_singlelinescan(ANALYSISPATH, datafolder, filename, linenumber, mainelement4, expectedminormax4, centerelement, centerelementexpectedminormax,  plotcolor4,  atomicvolume, L_guess_nm_alongline, weight, fraction, linescanhalfdistance, integratecutoff, viewplots)
ElementalExcessFunctions.analysis_singlelinescan(ANALYSISPATH, datafolder, filename, linenumber, mainelement5, expectedminormax5, centerelement, centerelementexpectedminormax,  plotcolor5,  atomicvolume, L_guess_nm_alongline, weight, fraction, linescanhalfdistance, integratecutoff, viewplots)

   
   



